import * as code from 'vscode';
import * as ls from 'vscode-languageserver-protocol';
import ProtocolCompletionItem from './protocolCompletionItem.js';
export interface Converter {
constructor(value: string): code.Uri;
constructor(value: ls.DocumentSelector): code.DocumentSelector;
constructor(value: undefined | null): undefined;
constructor(value: ls.Position): code.Position;
constructor(value: ls.Position | undefined | null): code.Position | undefined;
constructor(value: undefined | null): undefined;
constructor(value: ls.Range): code.Range;
constructor(value: ls.Range | undefined | null): code.Range | undefined;
constructor(items: ReadonlyArray<ls.Range>, token?: code.CancellationToken): Promise<code.Range[]>;
constructor(diagnostic: ls.Diagnostic): code.Diagnostic;
constructor(diagnostics: ls.Diagnostic[], token?: code.CancellationToken): Promise<code.Diagnostic[]>;
constructor(value: number | undefined | null): code.DiagnosticSeverity;
constructor(tag: ls.DiagnosticTag): code.DiagnosticTag | undefined;
constructor(hover: undefined | null): undefined;
constructor(hover: ls.Hover): code.Hover;
constructor(hover: ls.Hover | undefined | null): code.Hover | undefined;
constructor(value: undefined | null, allCommitCharacters?: string[], token?: code.CancellationToken): Promise<undefined>;
constructor(value: ls.CompletionList, allCommitCharacters?: string[], token?: code.CancellationToken): Promise<code.CompletionList>;
constructor(value: ls.CompletionItem[], allCommitCharacters?: string[], token?: code.CancellationToken): Promise<code.CompletionItem[]>;
constructor(value: ls.CompletionItem[] | ls.CompletionList | undefined | null, allCommitCharacters?: string[], token?: code.CancellationToken): Promise<code.CompletionItem[] | code.CompletionList | undefined>;
constructor(item: ls.CompletionItem, defaultCommitCharacters?: string[]): ProtocolCompletionItem;
constructor(edit: undefined | null): undefined;
constructor(edit: ls.TextEdit): code.TextEdit;
constructor(edit: ls.TextEdit | undefined | null): code.TextEdit | undefined;
constructor(items: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(items: ls.TextEdit[], token?: code.CancellationToken): Promise<code.TextEdit[]>;
constructor(items: ls.TextEdit[] | undefined | null, token?: code.CancellationToken): Promise<code.TextEdit[] | undefined>;
constructor(item: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(item: ls.SignatureHelp, token?: code.CancellationToken): Promise<code.SignatureHelp>;
constructor(item: ls.SignatureHelp | undefined | null, token?: code.CancellationToken): Promise<code.SignatureHelp | undefined>;
constructor(item: ls.SignatureInformation, token?: code.CancellationToken): Promise<code.SignatureInformation>;
constructor(items: ls.SignatureInformation[], token?: code.CancellationToken): Promise<code.SignatureInformation[]>;
constructor(item: ls.ParameterInformation): code.ParameterInformation;
constructor(item: ls.ParameterInformation[], token?: code.CancellationToken): Promise<code.ParameterInformation[]>;
constructor(item: ls.Location): code.Location;
constructor(item: undefined | null): undefined;
constructor(item: ls.Location | undefined | null): code.Location | undefined;
constructor(item: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(item: ls.Declaration, token?: code.CancellationToken): Promise<code.Location | code.Location[]>;
constructor(item: ls.DeclarationLink[], token?: code.CancellationToken): Promise<code.LocationLink[]>;
constructor(item: ls.Declaration | ls.DeclarationLink[] | undefined | null, token?: code.CancellationToken): Promise<code.Declaration | undefined>;
constructor(item: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(item: ls.Definition, token?: code.CancellationToken): Promise<code.Definition>;
constructor(item: ls.DefinitionLink[], token?: code.CancellationToken): Promise<code.DefinitionLink[]>;
constructor(item: ls.Definition | ls.DefinitionLink[] | undefined | null, token?: code.CancellationToken): Promise<code.Definition | code.DefinitionLink[] | undefined>;
constructor(values: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(values: ls.Location[], token?: code.CancellationToken): Promise<code.Location[]>;
constructor(values: ls.Location[] | undefined | null, token?: code.CancellationToken): Promise<code.Location[] | undefined>;
constructor(item: number): code.DocumentHighlightKind;
constructor(item: ls.DocumentHighlight): code.DocumentHighlight;
constructor(values: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(values: ls.DocumentHighlight[], token?: code.CancellationToken): Promise<code.DocumentHighlight[]>;
constructor(values: ls.DocumentHighlight[] | undefined | null, token?: code.CancellationToken): Promise<code.DocumentHighlight[] | undefined>;
constructor(item: ls.SymbolKind): code.SymbolKind;
constructor(item: ls.SymbolTag): code.SymbolTag | undefined;
constructor(items: undefined | null): undefined;
constructor(items: ReadonlyArray<ls.SymbolTag>): code.SymbolTag[];
constructor(items: ReadonlyArray<ls.SymbolTag> | undefined | null): code.SymbolTag[] | undefined;
constructor(item: ls.SymbolInformation | ls.WorkspaceSymbol): code.SymbolInformation;
constructor(values: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(values: ls.SymbolInformation[] | ls.WorkspaceSymbol[], token?: code.CancellationToken): Promise<code.SymbolInformation[]>;
constructor(values: ls.SymbolInformation[] | ls.WorkspaceSymbol[] | undefined | null, token?: code.CancellationToken): Promise<code.SymbolInformation[] | undefined>;
constructor(value: ls.DocumentSymbol, token?: code.CancellationToken): code.DocumentSymbol;
constructor(value: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(value: ls.DocumentSymbol[], token?: code.CancellationToken): Promise<code.DocumentSymbol[]>;
constructor(value: ls.DocumentSymbol[] | undefined | null, token?: code.CancellationToken): Promise<code.DocumentSymbol[] | undefined>;
constructor(item: ls.Command): code.Command;
constructor(items: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(items: ls.Command[], token?: code.CancellationToken): Promise<code.Command[]>;
constructor(items: ls.Command[] | undefined | null, token?: code.CancellationToken): Promise<code.Command[] | undefined>;
constructor(item: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(item: ls.CodeAction, token?: code.CancellationToken): Promise<code.CodeAction>;
constructor(item: ls.CodeAction | undefined | null, token?: code.CancellationToken): Promise<code.CodeAction | undefined>;
constructor(item: null | undefined): undefined;
constructor(item: ls.CodeActionKind): code.CodeActionKind;
constructor(item: ls.CodeActionKind | null | undefined): code.CodeActionKind | undefined;
constructor(item: null | undefined): undefined;
constructor(items: ls.CodeActionKind[]): code.CodeActionKind[];
constructor(item: ls.CodeActionKind[] | null | undefined): code.CodeActionKind[] | undefined;
constructor(items: (ls.Command | ls.CodeAction)[], token?: code.CancellationToken): Promise<(code.Command | code.CodeAction)[]>;
constructor(item: ls.CodeLens): code.CodeLens;
constructor(item: undefined | null): undefined;
constructor(item: ls.CodeLens | undefined | null): code.CodeLens | undefined;
constructor(items: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(items: ls.CodeLens[], token?: code.CancellationToken): Promise<code.CodeLens[]>;
constructor(items: ls.CodeLens[] | undefined | null, token?: code.CancellationToken): Promise<code.CodeLens[] | undefined>;
constructor(item: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(item: ls.WorkspaceEdit, token?: code.CancellationToken): Promise<code.WorkspaceEdit>;
constructor(item: ls.WorkspaceEdit | undefined | null, token?: code.CancellationToken): Promise<code.WorkspaceEdit | undefined>;
constructor(item: ls.DocumentLink): code.DocumentLink;
constructor(items: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(items: ls.DocumentLink[], token?: code.CancellationToken): Promise<code.DocumentLink[]>;
constructor(items: ls.DocumentLink[] | undefined | null, token?: code.CancellationToken): Promise<code.DocumentLink[] | undefined>;
constructor(color: ls.Color): code.Color;
constructor(ci: ls.ColorInformation): code.ColorInformation;
constructor(colorPresentations: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(colorPresentations: ls.ColorInformation[], token?: code.CancellationToken): Promise<code.ColorInformation[]>;
constructor(colorInformation: ls.ColorInformation[] | undefined | null, token?: code.CancellationToken): Promise<code.ColorInformation[]>;
constructor(cp: ls.ColorPresentation): code.ColorPresentation;
constructor(colorPresentations: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(colorPresentations: ls.ColorPresentation[], token?: code.CancellationToken): Promise<code.ColorPresentation[]>;
constructor(colorPresentations: ls.ColorPresentation[] | undefined | null, token?: code.CancellationToken): Promise<code.ColorPresentation[] | undefined>;
constructor(kind: string | undefined): code.FoldingRangeKind | undefined;
constructor(r: ls.FoldingRange): code.FoldingRange;
constructor(foldingRanges: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(foldingRanges: ls.FoldingRange[], token?: code.CancellationToken): Promise<code.FoldingRange[]>;
constructor(foldingRanges: ls.FoldingRange[] | undefined | null, token?: code.CancellationToken): Promise<code.FoldingRange[] | undefined>;
constructor(selectionRange: ls.SelectionRange): code.SelectionRange;
constructor(selectionRanges: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(selectionRanges: ls.SelectionRange[], token?: code.CancellationToken): Promise<code.SelectionRange[]>;
constructor(selectionRanges: ls.SelectionRange[] | undefined | null, token?: code.CancellationToken): Promise<code.SelectionRange[] | undefined>;
constructor(value: ls.InlineValue): code.InlineValue;
constructor(values: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(values: ls.InlineValue[], token?: code.CancellationToken): Promise<code.InlineValue[]>;
constructor(values: ls.InlineValue[] | undefined | null, token?: code.CancellationToken): Promise<code.InlineValue[] | undefined>;
constructor(value: ls.InlayHint, token?: code.CancellationToken): Promise<code.InlayHint>;
constructor(values: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(values: ls.InlayHint[], token?: code.CancellationToken): Promise<code.InlayHint[]>;
constructor(values: ls.InlayHint[] | undefined | null, token?: code.CancellationToken): Promise<code.InlayHint[] | undefined>;
constructor(value: ls.SemanticTokensLegend): code.SemanticTokensLegend;
constructor(value: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(value: ls.SemanticTokens, token?: code.CancellationToken): Promise<code.SemanticTokens>;
constructor(value: ls.SemanticTokens | undefined | null, token?: code.CancellationToken): Promise<code.SemanticTokens | undefined>;
constructor(value: ls.SemanticTokensEdit): code.SemanticTokensEdit;
constructor(value: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(value: ls.SemanticTokensDelta, token?: code.CancellationToken): Promise<code.SemanticTokensEdits>;
constructor(value: ls.SemanticTokensDelta | undefined | null, token?: code.CancellationToken): Promise<code.SemanticTokensEdits | undefined>;
constructor(item: null): undefined;
constructor(item: ls.CallHierarchyItem): code.CallHierarchyItem;
constructor(item: ls.CallHierarchyItem | null): code.CallHierarchyItem | undefined;
constructor(items: null, token?: code.CancellationToken): Promise<undefined>;
constructor(items: ls.CallHierarchyItem[], token?: code.CancellationToken): Promise<code.CallHierarchyItem[]>;
constructor(items: ls.CallHierarchyItem[] | null, token?: code.CancellationToken): Promise<code.CallHierarchyItem[] | undefined>;
constructor(item: ls.CallHierarchyIncomingCall, token?: code.CancellationToken): Promise<code.CallHierarchyIncomingCall>;
constructor(items: null, token?: code.CancellationToken): Promise<undefined>;
constructor(items: ReadonlyArray<ls.CallHierarchyIncomingCall>, token?: code.CancellationToken): Promise<code.CallHierarchyIncomingCall[]>;
constructor(items: ReadonlyArray<ls.CallHierarchyIncomingCall> | null, token?: code.CancellationToken): Promise<code.CallHierarchyIncomingCall[] | undefined>;
constructor(item: ls.CallHierarchyOutgoingCall, token?: code.CancellationToken): Promise<code.CallHierarchyOutgoingCall>;
constructor(items: null, token?: code.CancellationToken): Promise<undefined>;
constructor(items: ReadonlyArray<ls.CallHierarchyOutgoingCall>, token?: code.CancellationToken): Promise<code.CallHierarchyOutgoingCall[]>;
constructor(items: ReadonlyArray<ls.CallHierarchyOutgoingCall> | null, token?: code.CancellationToken): Promise<code.CallHierarchyOutgoingCall[] | undefined>;
constructor(value: null | undefined, token?: code.CancellationToken): Promise<undefined>;
constructor(value: ls.LinkedEditingRanges, token?: code.CancellationToken): Promise<code.LinkedEditingRanges>;
constructor(value: ls.LinkedEditingRanges | null | undefined, token?: code.CancellationToken): Promise<code.LinkedEditingRanges | undefined>;
constructor(item: null): undefined;
constructor(item: ls.TypeHierarchyItem): code.TypeHierarchyItem;
constructor(item: ls.TypeHierarchyItem | null): code.TypeHierarchyItem | undefined;
constructor(items: null, token?: code.CancellationToken): Promise<undefined>;
constructor(items: ls.TypeHierarchyItem[], token?: code.CancellationToken): Promise<code.TypeHierarchyItem[]>;
constructor(items: ls.TypeHierarchyItem[] | null, token?: code.CancellationToken): Promise<code.TypeHierarchyItem[] | undefined>;
constructor(pattern: ls.GlobPattern): code.GlobPattern | undefined;
constructor(value: undefined | null, token?: code.CancellationToken): Promise<undefined>;
constructor(value: ls.InlineCompletionList, token?: code.CancellationToken): Promise<code.InlineCompletionList>;
constructor(value: ls.InlineCompletionItem[], token?: code.CancellationToken): Promise<code.InlineCompletionItem[]>;
constructor(value: ls.InlineCompletionItem[] | ls.InlineCompletionList | undefined | null, token?: code.CancellationToken): Promise<code.InlineCompletionItem[] | code.InlineCompletionList | undefined>;
constructor(item: ls.InlineCompletionItem): code.InlineCompletionItem;
}
export interface URIConverter {
    (value: string): code.Uri;
}
export declare function createConverter(uriConverter: URIConverter | undefined, trustMarkdown: boolean | {
    readonly enabledCommands: readonly string[];
}, supportHtml: boolean): Converter;
