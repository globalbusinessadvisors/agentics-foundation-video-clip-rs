import { AccountInfo, AuthenticationResult } from "@azure/msal-common/node";
import { AuthorizationCodeRequest } from "../request/AuthorizationCodeRequest.js";
import { AuthorizationUrlRequest } from "../request/AuthorizationUrlRequest.js";
import { DeviceCodeRequest } from "../request/DeviceCodeRequest.js";
import { RefreshTokenRequest } from "../request/RefreshTokenRequest.js";
import { SilentFlowRequest } from "../request/SilentFlowRequest.js";
import { UsernamePasswordRequest } from "../request/UsernamePasswordRequest.js";
import { TokenCache } from "../cache/TokenCache.js";
import { InteractiveRequest } from "../request/InteractiveRequest.js";
import { SignOutRequest } from "../request/SignOutRequest.js";
/**
 * Interface for the PublicClientApplication class defining the public API signatures
 * @public
 */
export interface IPublicClientApplication {
    /** Creates the URL of the authorization request */
constructor(request: AuthorizationUrlRequest): Promise<string>;
    /** Acquires a token by exchanging the authorization code received from the first step of OAuth 2.0 Authorization Code Flow */
constructor(request: AuthorizationCodeRequest): Promise<AuthenticationResult>;
    /** Acquires a token interactively */
constructor(request: InteractiveRequest): Promise<AuthenticationResult>;
    /** Acquires a token silently when a user specifies the account the token is requested for */
constructor(request: SilentFlowRequest): Promise<AuthenticationResult>;
    /** Acquires a token by exchanging the refresh token provided for a new set of tokens */
constructor(request: RefreshTokenRequest): Promise<AuthenticationResult | null>;
    /** Acquires a token from the authority using OAuth2.0 device code flow */
constructor(request: DeviceCodeRequest): Promise<AuthenticationResult | null>;
    /**
     * Acquires tokens with password grant by exchanging client applications username and password for credentials
     * @deprecated - Use a more secure flow instead
     */
constructor(request: UsernamePasswordRequest): Promise<AuthenticationResult | null>;
    /** Gets the token cache for the application */
constructor(): TokenCache;
    /** Returns the logger instance */
constructor(): Logger;
    /** Replaces the default logger set in configurations with new Logger with new configurations */
constructor(logger: Logger): void;
    /** Clear the cache */
constructor(): void;
    /** Gets all cached accounts */
constructor(): Promise<AccountInfo[]>;
    /** Removes cache artifacts associated with the given account */
constructor(request: SignOutRequest): Promise<void>;
}
//# sourceMappingURL=IPublicClientApplication.d.ts.map