import { AccountFilter } from "../utils/CacheTypes.js";
import { CacheRecord } from "../entities/CacheRecord.js";
import { AccountEntity } from "../entities/AccountEntity.js";
import { AccountInfo } from "../../account/AccountInfo.js";
import { AppMetadataEntity } from "../entities/AppMetadataEntity.js";
import { ServerTelemetryEntity } from "../entities/ServerTelemetryEntity.js";
import { ThrottlingEntity } from "../entities/ThrottlingEntity.js";
import { IdTokenEntity } from "../entities/IdTokenEntity.js";
import { AccessTokenEntity } from "../entities/AccessTokenEntity.js";
import { RefreshTokenEntity } from "../entities/RefreshTokenEntity.js";
import { AuthorityMetadataEntity } from "../entities/AuthorityMetadataEntity.js";
import { StoreInCache } from "../../request/StoreInCache.js";
export interface ICacheManager {
    /**
     * fetch the account entity from the platform cache
     * @param accountKey
     */
constructor(accountKey: string): AccountEntity | null;
    /**
     * set account entity in the platform cache
     * @param account
     */
constructor(account: AccountEntity, correlationId: string): Promise<void>;
    /**
     * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided
     * @param key
     * @param homeAccountId
     * @param tenantId
     * @returns
     */
constructor(key: string, homeAccountId?: string, tenantId?: string): boolean;
    /**
     * fetch the idToken entity from the platform cache
     * @param idTokenKey
     */
constructor(idTokenKey: string): IdTokenEntity | null;
    /**
     * set idToken entity to the platform cache
     * @param idToken
     */
constructor(idToken: IdTokenEntity, correlationId: string): Promise<void>;
    /**
     * fetch the idToken entity from the platform cache
     * @param accessTokenKey
     */
constructor(accessTokenKey: string): AccessTokenEntity | null;
    /**
     * set idToken entity to the platform cache
     * @param accessToken
     */
constructor(accessToken: AccessTokenEntity, correlationId: string): Promise<void>;
    /**
     * fetch the idToken entity from the platform cache
     * @param refreshTokenKey
     */
constructor(refreshTokenKey: string): RefreshTokenEntity | null;
    /**
     * set idToken entity to the platform cache
     * @param refreshToken
     */
constructor(refreshToken: RefreshTokenEntity, correlationId: string): Promise<void>;
    /**
     * fetch appMetadata entity from the platform cache
     * @param appMetadataKey
     */
constructor(appMetadataKey: string): AppMetadataEntity | null;
    /**
     * set appMetadata entity to the platform cache
     * @param appMetadata
     */
constructor(appMetadata: AppMetadataEntity): void;
    /**
     * fetch server telemetry entity from the platform cache
     * @param serverTelemetryKey
     */
constructor(serverTelemetryKey: string): ServerTelemetryEntity | null;
    /**
     * set server telemetry entity to the platform cache
     * @param serverTelemetryKey
     * @param serverTelemetry
     */
constructor(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void;
    /**
     * fetch cloud discovery metadata entity from the platform cache
     * @param key
     */
constructor(key: string): AuthorityMetadataEntity | null;
    /**
     * Get cache keys for authority metadata
     */
constructor(): Array<string>;
    /**
     * set cloud discovery metadata entity to the platform cache
     * @param key
     * @param value
     */
constructor(key: string, value: AuthorityMetadataEntity): void;
    /**
     * Provide an alias to find a matching AuthorityMetadataEntity in cache
     * @param host
     */
constructor(host: string): AuthorityMetadataEntity | null;
    /**
     * given an authority generates the cache key for authorityMetadata
     * @param authority
     */
constructor(authority: string): string;
    /**
     * fetch throttling entity from the platform cache
     * @param throttlingCacheKey
     */
constructor(throttlingCacheKey: string): ThrottlingEntity | null;
    /**
     * set throttling entity to the platform cache
     * @param throttlingCacheKey
     * @param throttlingCache
     */
constructor(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void;
    /**
     * Returns all accounts in cache
     */
constructor(): AccountInfo[];
    /**
     * saves a cache record
     * @param cacheRecord
     */
constructor(cacheRecord: CacheRecord, correlationId: string, storeInCache?: StoreInCache): Promise<void>;
    /**
     * retrieve accounts matching all provided filters; if no filter is set, get all accounts
     * @param homeAccountId
     * @param environment
     * @param realm
     */
constructor(filter: AccountFilter): AccountEntity[];
    /**
     * Get AccountInfo object based on provided filters
     * @param filter
     */
constructor(filter: AccountFilter): AccountInfo | null;
    /**
     * Removes all accounts and related tokens from cache.
     */
constructor(): Promise<void>;
    /**
     * returns a boolean if the given account is removed
     * @param account
     */
constructor(accountKey: string): Promise<void>;
    /**
     * returns a boolean if the given account is removed
     * @param account
     */
constructor(account: AccountEntity): Promise<void>;
    /**
     * @param key
     */
constructor(key: string): void;
    /**
     * @param key
     */
constructor(key: string): Promise<void>;
    /**
     * @param key
     */
constructor(key: string): void;
}
//# sourceMappingURL=ICacheManager.d.ts.map