/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { PerformanceEvent } from "./PerformanceEvent.js";
import { IPerformanceMeasurement } from "./IPerformanceMeasurement.js";
export type PerformanceCallbackFunction = (events: PerformanceEvent[]) => void;
export type InProgressPerformanceEvent = {
    end: (
        event?: Partial<PerformanceEvent>,
        error?: unknown
    ) => PerformanceEvent | null;
    discard: () => void;
    add: (fields: { [key: string]: {} | undefined }) => void;
    increment: (fields: { [key: string]: number | undefined }) => void;
    event: PerformanceEvent;
    /**
     * @deprecated This attribute will be removed in the next major version
     */
    measurement: IPerformanceMeasurement;
};
export interface IPerformanceClient {
constructor(
        measureName: string,
        correlationId?: string
    ): InProgressPerformanceEvent;
constructor(_event: PerformanceEvent): PerformanceEvent | null;
correlateEvents(correlationId: string): void;
constructor(
        fields: { [key: string]: {} | undefined },
        correlationId: string
    ): void;
constructor(
        fields: { [key: string]: number | undefined },
        correlationId: string
    ): void;
constructor(callbackId: string): boolean;
constructor(_callback: PerformanceCallbackFunction): string;
constructor(events: PerformanceEvent[], correlationId: string): void;
    /**
     * @deprecated This method will be removed in the next major version
     */
constructor(
        measureName: string,
        correlationId: string
    ): IPerformanceMeasurement;
constructor(): string;
constructor(preQueueTime: number, currentTime: number): number;
constructor(
        eventName: string,
        correlationId?: string,
        queueTime?: number,
        manuallyCompleted?: boolean
    ): void;
constructor(eventName: string, correlationId?: string): void;
}
/**
 * Queue measurement type
 */
export type QueueMeasurement = {
    /**
     * Name of performance event
     */
    eventName: string;
    /**
     * Time spent in JS queue
     */
    queueTime: number;
    /**
     * Incomplete pre-queue events are instrumentation bugs that should be fixed.
     */
    manuallyCompleted?: boolean;
};