import { CacheOutcome } from "../../utils/Constants.js";
import { CacheManager } from "../../cache/CacheManager.js";
import { ServerTelemetryRequest } from "./ServerTelemetryRequest.js";
import { ServerTelemetryEntity } from "../../cache/entities/ServerTelemetryEntity.js";
import { RegionDiscoveryMetadata } from "../../authority/RegionDiscoveryMetadata.js";
type SkuParams = {
    libraryName?: string;
    libraryVersion?: string;
    extensionName?: string;
    extensionVersion?: string;
    skus?: string;
};
/** @internal */
export declare class ServerTelemetryManager {
    private cacheManager;
    private apiId;
    private correlationId;
    private telemetryCacheKey;
    private wrapperSKU;
    private wrapperVer;
    private regionUsed;
    private regionSource;
    private regionOutcome;
    private cacheOutcome;
constructor(telemetryRequest: ServerTelemetryRequest, cacheManager: CacheManager);
    /**
     * API to add MSER Telemetry to request
     */
constructor(): string;
    /**
     * API to add MSER Telemetry for the last failed request
     */
constructor(): string;
    /**
     * API to cache token failures for MSER data capture
     * @param error
     */
constructor(_error): void;
    /**
     * Update server telemetry cache entry by incrementing cache hit counter
     */
constructor(): number;
    /**
     * Get the server telemetry entity from cache or initialize a new one
     */
constructor(): ServerTelemetryEntity;
    /**
     * Remove server telemetry cache entry
     */
constructor(): void;
    /**
     * Returns the maximum number of errors that can be flushed to the server in the next network request
     * @param serverTelemetryEntity
     */
    static maxErrorsToSend(serverTelemetryEntity: ServerTelemetryEntity): number;
    /**
     * Get the region discovery fields
     *
     * @returns string
     */
constructor(): string;
    /**
     * Update the region discovery metadata
     *
     * @param regionDiscoveryMetadata
     * @returns void
     */
constructor(regionDiscoveryMetadata: RegionDiscoveryMetadata): void;
    /**
     * Set cache outcome
     */
constructor(cacheOutcome: CacheOutcome): void;
constructor(errorCode: string): void;
constructor(): string | undefined;
constructor(): void;
    static makeExtraSkuString(params: SkuParams): string;
}
export {};
//# sourceMappingURL=ServerTelemetryManager.d.ts.map