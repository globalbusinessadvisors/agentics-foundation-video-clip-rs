/// <reference types="chai" />

interface ChaiAsPromised extends Chai.ChaiPlugin {
constructor(assertion: Chai.PromisedAssertion, promise: PromiseLike<any>): void;
constructor(values: any[]): any;
}

declare const chaiAsPromised: ChaiAsPromised;
export default chaiAsPromised;

declare global {
    export namespace Chai {
        // For BDD API
        interface Assertion extends LanguageChains, NumericComparison, TypeComparison {
            eventually: PromisedAssertion;
constructor(expected: any): PromisedAssertion;
            fulfilled: PromisedAssertion;
            rejected: PromisedAssertion;
            rejectedWith: PromisedThrow;
constructor(fn: Function): PromisedAssertion;
        }

        // Eventually does not have .then(), but PromisedAssertion have.
        interface Eventually extends PromisedLanguageChains, PromisedNumericComparison, PromisedTypeComparison {
            // From chai-as-promised
constructor(expected: any): PromisedAssertion;
            fulfilled: PromisedAssertion;
            rejected: PromisedAssertion;
            rejectedWith: PromisedThrow;
constructor(fn: Function): PromisedAssertion;

            // From chai
            not: PromisedAssertion;
            deep: PromisedDeep;
            ordered: PromisedOrdered;
            nested: PromisedNested;
            any: PromisedKeyFilter;
            all: PromisedKeyFilter;
            a: PromisedTypeComparison;
            an: PromisedTypeComparison;
            include: PromisedInclude;
            contain: PromisedInclude;
            ok: PromisedAssertion;
            true: PromisedAssertion;
            false: PromisedAssertion;
            null: PromisedAssertion;
            undefined: PromisedAssertion;
            NaN: PromisedAssertion;
            exist: PromisedAssertion;
            empty: PromisedAssertion;
            arguments: PromisedAssertion;
            Arguments: PromisedAssertion;
            equal: PromisedEqual;
            equals: PromisedEqual;
            containSubset: PromisedContainSubset;
            eq: PromisedEqual;
            eql: PromisedEqual;
            eqls: PromisedEqual;
            property: PromisedProperty;
            ownProperty: PromisedOwnProperty;
            haveOwnProperty: PromisedOwnProperty;
            ownPropertyDescriptor: PromisedOwnPropertyDescriptor;
            haveOwnPropertyDescriptor: PromisedOwnPropertyDescriptor;
            length: PromisedLength;
            lengthOf: PromisedLength;
            match: PromisedMatch;
            matches: PromisedMatch;
constructor(string: string, message?: string): PromisedAssertion;
            keys: PromisedKeys;
constructor(string: string): PromisedAssertion;
            throw: PromisedThrow;
            throws: PromisedThrow;
            Throw: PromisedThrow;
            respondTo: PromisedRespondTo;
            respondsTo: PromisedRespondTo;
            itself: PromisedAssertion;
            satisfy: PromisedSatisfy;
            satisfies: PromisedSatisfy;
            closeTo: PromisedCloseTo;
            approximately: PromisedCloseTo;
            members: PromisedMembers;
            increase: PromisedPropertyChange;
            increases: PromisedPropertyChange;
            decrease: PromisedPropertyChange;
            decreases: PromisedPropertyChange;
            change: PromisedPropertyChange;
            changes: PromisedPropertyChange;
            extensible: PromisedAssertion;
            sealed: PromisedAssertion;
            frozen: PromisedAssertion;
constructor(list: any[], message?: string): PromisedAssertion;
        }

        interface PromisedAssertion extends Eventually, PromiseLike<any> {
        }

        interface PromisedLanguageChains {
            eventually: Eventually;

            // From chai
            to: PromisedAssertion;
            be: PromisedAssertion;
            been: PromisedAssertion;
            is: PromisedAssertion;
            that: PromisedAssertion;
            which: PromisedAssertion;
            and: PromisedAssertion;
            has: PromisedAssertion;
            have: PromisedAssertion;
            with: PromisedAssertion;
            at: PromisedAssertion;
            of: PromisedAssertion;
            same: PromisedAssertion;
            but: PromisedAssertion;
            does: PromisedAssertion;
        }

        interface PromisedNumericComparison {
            above: PromisedNumberComparer;
            gt: PromisedNumberComparer;
            greaterThan: PromisedNumberComparer;
            least: PromisedNumberComparer;
            gte: PromisedNumberComparer;
            below: PromisedNumberComparer;
            lt: PromisedNumberComparer;
            lessThan: PromisedNumberComparer;
            most: PromisedNumberComparer;
            lte: PromisedNumberComparer;
constructor(start: number, finish: number, message?: string): PromisedAssertion;
        }

        interface PromisedNumberComparer {
            (value: number, message?: string): PromisedAssertion;
        }

        interface PromisedTypeComparison {
            (type: string, message?: string): PromisedAssertion;
            instanceof: PromisedInstanceOf;
            instanceOf: PromisedInstanceOf;
        }

        interface PromisedInstanceOf {
            (constructor: Object, message?: string): PromisedAssertion;
        }

        interface PromisedCloseTo {
            (expected: number, delta: number, message?: string): PromisedAssertion;
        }

        interface PromisedNested {
            include: PromisedInclude;
            property: PromisedProperty;
            members: PromisedMembers;
        }

        interface PromisedDeep {
            equal: PromisedEqual;
            equals: PromisedEqual;
            eq: PromisedEqual;
            include: PromisedInclude;
            property: PromisedProperty;
            members: PromisedMembers;
            ordered: PromisedOrdered;
        }

        interface PromisedOrdered {
            members: PromisedMembers;
        }

        interface PromisedKeyFilter {
            keys: PromisedKeys;
        }

        interface PromisedEqual {
            (value: any, message?: string): PromisedAssertion;
        }

        interface PromisedContainSubset {
            (value: any): PromisedAssertion;
        }

        interface PromisedProperty {
            (name: string | symbol, value?: any, message?: string): PromisedAssertion;
        }

        interface PromisedOwnProperty {
            (name: string | symbol, message?: string): PromisedAssertion;
        }

        interface PromisedOwnPropertyDescriptor {
            (name: string | symbol, descriptor: PropertyDescriptor, message?: string): PromisedAssertion;
            (name: string | symbol, message?: string): PromisedAssertion;
        }

        interface PromisedLength extends PromisedLanguageChains, PromisedNumericComparison {
            (length: number, message?: string): PromisedAssertion;
        }

        interface PromisedInclude {
            (value: Object, message?: string): PromisedAssertion;
            (value: string, message?: string): PromisedAssertion;
            (value: number, message?: string): PromisedAssertion;
            keys: PromisedKeys;
            deep: PromisedDeep;
            ordered: PromisedOrdered;
            members: PromisedMembers;
            any: PromisedKeyFilter;
            all: PromisedKeyFilter;
        }

        interface PromisedMatch {
            (regexp: RegExp | string, message?: string): PromisedAssertion;
        }

        interface PromisedKeys {
            (...keys: string[]): PromisedAssertion;
            (keys: any[]): PromisedAssertion;
            (keys: Object): PromisedAssertion;
        }

        interface PromisedThrow {
            (): PromisedAssertion;
            (expected: string | RegExp, message?: string): PromisedAssertion;
            (constructor: Error | Function, expected?: string | RegExp, message?: string): PromisedAssertion;
        }

        interface PromisedRespondTo {
            (method: string, message?: string): PromisedAssertion;
        }

        interface PromisedSatisfy {
            (matcher: Function, message?: string): PromisedAssertion;
        }

        interface PromisedMembers {
            (set: any[], message?: string): PromisedAssertion;
        }

        interface PromisedPropertyChange {
            (object: Object, property: string, message?: string): PromisedAssertion;
        }

        // For Assert API
        interface Assert {
            eventually: PromisedAssert;
constructor(promise: PromiseLike<any>, message?: string): PromiseLike<void>;
constructor(promise: PromiseLike<any>, expected: any, message?: string): PromiseLike<void>;
constructor(promise: PromiseLike<any>, expected: any, message?: string): PromiseLike<void>;
constructor(promise: PromiseLike<any>, message?: string): PromiseLike<void>;
constructor(promise: PromiseLike<any>, expected: any, message?: string): PromiseLike<void>;
constructor(promise: PromiseLike<any>, match: RegExp, message?: string): PromiseLike<void>;
constructor(fn: Function): PromiseLike<void>;
        }

        export interface PromisedAssert {
constructor(actual?: PromiseLike<any>, expected?: any, msg?: string, operator?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;

constructor(act: PromiseLike<any>, exp: any, msg?: string): PromiseLike<void>;
constructor(act: PromiseLike<any>, exp: any, msg?: string): PromiseLike<void>;

constructor(act: PromiseLike<any>, exp: any, msg?: string): PromiseLike<void>;
constructor(act: PromiseLike<any>, exp: any, msg?: string): PromiseLike<void>;

constructor(act: PromiseLike<any>, exp: any, msg?: string): PromiseLike<void>;
constructor(act: PromiseLike<any>, exp: any, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<number>, above: number, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<number>, atLeast: number, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<number>, below: number, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<number>, atMost: number, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<number>, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, type: string, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, type: string, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, type: Function, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, type: Function, msg?: string): PromiseLike<void>;

constructor(exp: PromiseLike<string>, inc: any, msg?: string): PromiseLike<void>;
constructor(exp: PromiseLike<any[]>, inc: any, msg?: string): PromiseLike<void>;

constructor(exp: PromiseLike<string>, inc: any, msg?: string): PromiseLike<void>;
constructor(exp: PromiseLike<any[]>, inc: any, msg?: string): PromiseLike<void>;

constructor(exp: PromiseLike<string>, inc: any, msg?: string): PromiseLike<void>;
constructor(exp: PromiseLike<any[]>, inc: any, msg?: string): PromiseLike<void>;

constructor(exp: PromiseLike<string>, inc: any, msg?: string): PromiseLike<void>;
constructor(exp: PromiseLike<any[]>, inc: any, msg?: string): PromiseLike<void>;

constructor(exp: PromiseLike<Object>, inc: Object, msg?: string): PromiseLike<void>;
constructor(exp: PromiseLike<Object>, inc: Object, msg?: string): PromiseLike<void>;

constructor(exp: PromiseLike<Object>, inc: Object, msg?: string): PromiseLike<void>;
constructor(exp: PromiseLike<Object>, inc: Object, msg?: string): PromiseLike<void>;

constructor(exp: PromiseLike<Object>, inc: Object, msg?: string): PromiseLike<void>;
constructor(exp: PromiseLike<Object>, inc: Object, msg?: string): PromiseLike<void>;

constructor(exp: PromiseLike<Object>, inc: Object, msg?: string): PromiseLike<void>;
constructor(exp: PromiseLike<Object>, inc: Object, msg?: string): PromiseLike<void>;

constructor(exp: PromiseLike<any>, re: RegExp, msg?: string): PromiseLike<void>;
constructor(exp: PromiseLike<any>, re: RegExp, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<Object>, prop: string, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<Object>, prop: string, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<Object>, prop: string, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<Object>, prop: string, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<Object>, prop: string, val: any, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<Object>, prop: string, val: any, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<Object>, prop: string, val: any, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<Object>, prop: string, val: any, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<object>, prop: string, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<object>, prop: string, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<object>, prop: string, val: any, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<object>, prop: string, val: any, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<object>, prop: string, val: any, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<object>, prop: string, val: any, msg?: string): PromiseLike<void>;

constructor(exp: PromiseLike<any>, len: number, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<any>, keys: any[], msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<any>, keys: object, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<any>, keys: any[], msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<any>, keys: object, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<any>, keys: any[], msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<any>, keys: object, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<any>, keys: any[], msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<any>, keys: object, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<any>, keys: any[], msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<any>, keys: object, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<any>, keys: any[], msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<any>, keys: object, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<any>, keys: any[], msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<any>, keys: object, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<any>, keys: any[], msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<any>, keys: object, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<any>, keys: any[], msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<any>, keys: object, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<any>, keys: any[], msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<any>, keys: object, msg?: string): PromiseLike<void>;

            // alias frenzy
constructor(fn: Function, msg?: string): PromiseLike<void>;
constructor(fn: Function, regExp: RegExp): PromiseLike<void>;
constructor(fn: Function, errType: Function, msg?: string): PromiseLike<void>;
constructor(fn: Function, errType: Function, regExp: RegExp): PromiseLike<void>;

constructor(fn: Function, msg?: string): PromiseLike<void>;
constructor(fn: Function, regExp: RegExp): PromiseLike<void>;
constructor(fn: Function, errType: Function, msg?: string): PromiseLike<void>;
constructor(fn: Function, errType: Function, regExp: RegExp): PromiseLike<void>;

constructor(fn: Function, msg?: string): PromiseLike<void>;
constructor(fn: Function, regExp: RegExp): PromiseLike<void>;
constructor(fn: Function, errType: Function, msg?: string): PromiseLike<void>;
constructor(fn: Function, errType: Function, regExp: RegExp): PromiseLike<void>;

constructor(fn: Function, msg?: string): PromiseLike<void>;
constructor(fn: Function, regExp: RegExp): PromiseLike<void>;
constructor(fn: Function, errType: Function, msg?: string): PromiseLike<void>;
constructor(fn: Function, errType: Function, regExp: RegExp): PromiseLike<void>;

constructor(val: PromiseLike<any>, operator: string, val2: any, msg?: string): PromiseLike<void>;
constructor(act: PromiseLike<number>, exp: number, delta: number, msg?: string): PromiseLike<void>;
constructor(act: PromiseLike<number>, exp: number, delta: number, msg?: string): PromiseLike<void>;

constructor(set1: PromiseLike<any[]>, set2: any[], msg?: string): PromiseLike<void>;
constructor(set1: PromiseLike<any[]>, set2: any[], msg?: string): PromiseLike<void>;
constructor(set1: PromiseLike<any[]>, set2: any[], msg?: string): PromiseLike<void>;
constructor(set1: PromiseLike<any[]>, set2: any[], msg?: string): PromiseLike<void>;
constructor(set1: PromiseLike<any[]>, set2: any[], msg?: string): PromiseLike<void>;
constructor(set1: PromiseLike<any[]>, set2: any[], msg?: string): PromiseLike<void>;
constructor(set1: PromiseLike<any[]>, set2: any[], msg?: string): PromiseLike<void>;
constructor(set1: PromiseLike<any[]>, set2: any[], msg?: string): PromiseLike<void>;
constructor(set1: PromiseLike<any[]>, set2: any[], msg?: string): PromiseLike<void>;
constructor(set1: PromiseLike<any[]>, set2: any[], msg?: string): PromiseLike<void>;
constructor(set1: PromiseLike<any[]>, set2: any[], msg?: string): PromiseLike<void>;
constructor(set1: PromiseLike<any[]>, set2: any[], msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, list: any[], msg?: string): PromiseLike<void>;

constructor(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;
constructor(
                modifier: Function,
                obj: object,
                property: string,
                change: number,
                msg?: string,
            ): PromiseLike<void>;
constructor(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;
constructor(
                modifier: Function,
                obj: object,
                property: string,
                change: number,
                msg?: string,
            ): PromiseLike<void>;
constructor(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;
constructor(
                modifier: Function,
                obj: Object,
                property: string,
                change: number,
                msg?: string,
            ): PromiseLike<void>;
constructor(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;
constructor(
                modifier: Function,
                obj: Object,
                property: string,
                change: number,
                msg?: string,
            ): PromiseLike<void>;
constructor(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;
constructor(
                modifier: Function,
                obj: Object,
                property: string,
                change: number,
                msg?: string,
            ): PromiseLike<void>;
constructor(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;
constructor(
                modifier: Function,
                obj: Object,
                property: string,
                change: number,
                msg?: string,
            ): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<Object>, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<Object>, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<Object>, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<Object>, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<Object>, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<Object>, msg?: string): PromiseLike<void>;

constructor(obj: PromiseLike<Object>, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<Object>, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<Object>, msg?: string): PromiseLike<void>;
constructor(obj: PromiseLike<Object>, msg?: string): PromiseLike<void>;

constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
constructor(val: PromiseLike<any>, msg?: string): PromiseLike<void>;
        }
    }
}
