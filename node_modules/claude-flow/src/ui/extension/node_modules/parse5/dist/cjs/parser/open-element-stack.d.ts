import { TAG_ID as $ } from '../common/html.js';
import type { TreeAdapter, TreeAdapterTypeMap } from '../tree-adapters/interface.js';
export interface StackHandler<T extends TreeAdapterTypeMap> {
    onItemPush: (node: T['parentNode'], tid: number, isTop: boolean) => void;
    onItemPop: (node: T['parentNode'], isTop: boolean) => void;
}
export declare class OpenElementStack<T extends TreeAdapterTypeMap> {
    private treeAdapter;
    private handler;
    items: T['parentNode'][];
    tagIDs: $[];
    current: T['parentNode'] | undefined;
    stackTop: number;
    tmplCount: number;
    currentTagId: number | undefined;
    get currentTmplContentOrNode(): T['parentNode'];
constructor(document: T['document'], treeAdapter: TreeAdapter<T>, handler: StackHandler<T>);
    private _indexOf;
    private _isInTemplate;
    private _updateCurrentElement;
constructor(element: T['element'], tagID: $): void;
constructor(): void;
constructor(oldElement: T['element'], newElement: T['element']): void;
constructor(referenceElement: T['element'], newElement: T['element'], newElementID: $): void;
constructor(tagName: $): void;
constructor(idx: number): void;
constructor(element: T['element']): void;
    private popUntilPopped;
constructor(): void;
constructor(): void;
constructor(): void;
    private _indexOfTagNames;
    private clearBackTo;
constructor(): void;
constructor(): void;
constructor(): void;
constructor(element: T['element']): void;
constructor(): T['element'] | null;
constructor(element: T['element']): boolean;
constructor(element: T['element']): T['element'] | null;
constructor(): boolean;
    private hasInDynamicScope;
constructor(tagName: $): boolean;
constructor(tagName: $): boolean;
constructor(tagName: $): boolean;
constructor(): boolean;
constructor(tagName: $): boolean;
constructor(): boolean;
constructor(tagName: $): boolean;
constructor(): void;
constructor(): void;
constructor(exclusionId: $): void;
}
