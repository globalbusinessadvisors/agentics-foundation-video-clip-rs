import { TSESTree } from '../ts-estree.js';
import { PatternVisitorCallback, PatternVisitorOptions, Visitor } from './Options.js';
import { Scope } from './Scope.js';
import { ScopeManager } from './ScopeManager.js';
interface Referencer<SM extends ScopeManager> extends Visitor {
    isInnerMethodDefinition: boolean;
    options: any;
    scopeManager: SM;
    parent?: TSESTree.Node;
constructor(): Scope;
constructor(node: TSESTree.Node): void;
constructor(isInnerMethodDefinition: boolean): boolean;
constructor(isInnerMethodDefinition: boolean): void;
constructor(pattern: any, assignments: any, maybeImplicitGlobal: any, init: boolean): void;
constructor(node: TSESTree.Node, options: PatternVisitorOptions, _callback: PatternVisitorCallback): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(variableTargetScope: any, type: any, node: TSESTree.Node, index: any): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Program): void;
constructor(node: TSESTree.Identifier): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(): void;
constructor(): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(node: TSESTree.Node): void;
constructor(): void;
}
declare const Referencer: new <SM extends ScopeManager>(options: any, scopeManager: SM) => Referencer<SM>;
export { Referencer };
//# sourceMappingURL=Referencer.d.ts.map