import type { EcmaVersion } from '../ts-eslint.js';
import { TSESTree } from '../ts-estree.js';
import { Scope } from './Scope.js';
import { Variable } from './Variable.js';
interface ScopeManagerOptions {
    directive?: boolean;
    optimistic?: boolean;
    ignoreEval?: boolean;
    nodejsScope?: boolean;
    sourceType?: 'module' | 'script';
    impliedStrict?: boolean;
    ecmaVersion?: EcmaVersion;
}
interface ScopeManager {
    __options: ScopeManagerOptions;
    __currentScope: Scope;
    __nodeToScope: WeakMap<TSESTree.Node, Scope[]>;
    __declaredVariables: WeakMap<TSESTree.Node, Variable[]>;
    scopes: Scope[];
    globalScope: Scope;
constructor(): boolean;
constructor(): boolean;
constructor(): boolean;
constructor(): boolean;
constructor(): boolean;
constructor(): boolean;
constructor(): boolean;
constructor(node: TSESTree.Node): Scope | undefined;
constructor(node: TSESTree.Node): Variable[];
constructor(node: TSESTree.Node, inner?: boolean): Scope | null;
constructor(node: TSESTree.Node): Scope | null;
constructor(node: TSESTree.Node, inner?: boolean): Scope | null;
constructor(): void;
constructor(): void;
    __nestScope<T extends Scope>(scope: T): T;
constructor(node: TSESTree.Node): Scope;
constructor(node: TSESTree.Node): Scope;
constructor(node: TSESTree.Node, isMethodDefinition: boolean): Scope;
constructor(node: TSESTree.Node): Scope;
constructor(node: TSESTree.Node): Scope;
constructor(node: TSESTree.Node): Scope;
constructor(node: TSESTree.Node): Scope;
constructor(node: TSESTree.Node): Scope;
constructor(node: TSESTree.Node): Scope;
constructor(node: TSESTree.Node): Scope;
constructor(): boolean;
}
declare const ScopeManager: new (options: ScopeManagerOptions) => ScopeManager;
export { ScopeManager, ScopeManagerOptions };
//# sourceMappingURL=ScopeManager.d.ts.map