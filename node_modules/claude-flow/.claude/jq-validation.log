[JQ_VALIDATION] Hook triggered at Mon Jul 14 21:56:09 UTC 2025
[JQ_VALIDATION] Raw input:
{"session_id":"c32082bb-89a7-445f-afa8-fd02d592b88e","transcript_path":"/home/codespace/.claude/projects/-workspaces-claude-code-flow/c32082bb-89a7-445f-afa8-fd02d592b88e.jsonl","hook_event_name":"PostToolUse","tool_name":"Edit","tool_input":{"file_path":"/workspaces/claude-code-flow/src/cli/simple-commands/init/templates/enhanced-templates.js","old_string":"              command: \"npx claude-flow@alpha hooks pre-command --command \\\"${command}\\\" --validate-safety true --prepare-resources true\"","new_string":"              command: \"cat | jq -r '.tool_input.command // \\\"\\\"' | xargs -I {} npx claude-flow@alpha hooks pre-command --command \\\"{}\\\" --validate-safety true --prepare-resources true\""},"tool_response":{"filePath":"/workspaces/claude-code-flow/src/cli/simple-commands/init/templates/enhanced-templates.js","oldString":"              command: \"npx claude-flow@alpha hooks pre-command --command \\\"${command}\\\" --validate-safety true --prepare-resources true\"","newString":"              command: \"cat | jq -r '.tool_input.command // \\\"\\\"' | xargs -I {} npx claude-flow@alpha hooks pre-command --command \\\"{}\\\" --validate-safety true --prepare-resources true\"","originalFile":"// enhanced-templates.js - Generate Claude Flow v2.0.0 enhanced templates\nimport { readFileSync } from 'fs';\nimport { dirname, join } from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n\n// Load template files\nconst loadTemplate = (filename) => {\n  try {\n    return readFileSync(join(__dirname, filename), 'utf8');\n  } catch (error) {\n    // Silently fall back to hardcoded templates if files not found\n    // This handles npm packaging scenarios where template files may not be included\n    return null;\n  }\n};\n\nexport function createEnhancedClaudeMd() {\n  const template = loadTemplate('CLAUDE.md');\n  if (!template) {\n    // Fallback to hardcoded if template file not found\n    return createEnhancedClaudeMdFallback();\n  }\n  return template;\n}\n\nexport function createEnhancedSettingsJson() {\n  const template = loadTemplate('settings.json');\n  if (!template) {\n    return createEnhancedSettingsJsonFallback();\n  }\n  return template;\n}\n\nexport function createWrapperScript(type = 'unix') {\n  // For unix, use the universal wrapper that works in both CommonJS and ES modules\n  if (type === 'unix') {\n    const universalTemplate = loadTemplate('claude-flow-universal');\n    if (universalTemplate) {\n      return universalTemplate;\n    }\n  }\n  \n  const filename = type === 'unix' ? 'claude-flow' : \n                   type === 'windows' ? 'claude-flow.bat' : \n                   'claude-flow.ps1';\n  \n  const template = loadTemplate(filename);\n  if (!template) {\n    return createWrapperScriptFallback(type);\n  }\n  return template;\n}\n\nexport function createCommandDoc(category, command) {\n  const template = loadTemplate(`commands/${category}/${command}.md`);\n  if (!template) {\n    // Silently fall back to generated documentation\n    return createCommandDocFallback(category, command);\n  }\n  return template;\n}\n\n// Generate command documentation fallbacks\nfunction createCommandDocFallback(category, command) {\n  const docs = {\n    analysis: {\n      'bottleneck-detect': `# bottleneck-detect\n\nAutomatically detect performance bottlenecks in your swarm operations.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow analysis bottleneck-detect [options]\n\\`\\`\\`\n\n## Options\n- \\`--swarm-id <id>\\` - Target specific swarm\n- \\`--threshold <ms>\\` - Performance threshold (default: 1000ms)\n- \\`--export <file>\\` - Export results to file\n\n## Examples\n\\`\\`\\`bash\n# Detect bottlenecks in current swarm\nnpx claude-flow analysis bottleneck-detect\n\n# Set custom threshold\nnpx claude-flow analysis bottleneck-detect --threshold 500\n\n# Export results\nnpx claude-flow analysis bottleneck-detect --export bottlenecks.json\n\\`\\`\\`\n`,\n      'token-usage': `# token-usage\n\nAnalyze token usage patterns and optimize for efficiency.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow analysis token-usage [options]\n\\`\\`\\`\n\n## Options\n- \\`--period <time>\\` - Analysis period (1h, 24h, 7d, 30d)\n- \\`--by-agent\\` - Break down by agent\n- \\`--by-operation\\` - Break down by operation type\n\n## Examples\n\\`\\`\\`bash\n# Last 24 hours token usage\nnpx claude-flow analysis token-usage --period 24h\n\n# By agent breakdown\nnpx claude-flow analysis token-usage --by-agent\n\n# Export detailed report\nnpx claude-flow analysis token-usage --period 7d --export tokens.csv\n\\`\\`\\`\n`,\n      'performance-report': `# performance-report\n\nGenerate comprehensive performance reports for swarm operations.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow analysis performance-report [options]\n\\`\\`\\`\n\n## Options\n- \\`--format <type>\\` - Report format (json, html, markdown)\n- \\`--include-metrics\\` - Include detailed metrics\n- \\`--compare <id>\\` - Compare with previous swarm\n\n## Examples\n\\`\\`\\`bash\n# Generate HTML report\nnpx claude-flow analysis performance-report --format html\n\n# Compare swarms\nnpx claude-flow analysis performance-report --compare swarm-123\n\n# Full metrics report\nnpx claude-flow analysis performance-report --include-metrics --format markdown\n\\`\\`\\`\n`\n    },\n    automation: {\n      'auto-agent': `# auto-agent\n\nAutomatically assign agents based on task analysis.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow automation auto-agent [options]\n\\`\\`\\`\n\n## Options\n- \\`--task <description>\\` - Task to analyze\n- \\`--max-agents <n>\\` - Maximum agents to spawn\n- \\`--strategy <type>\\` - Assignment strategy\n\n## Examples\n\\`\\`\\`bash\n# Auto-assign for task\nnpx claude-flow automation auto-agent --task \"Build REST API\"\n\n# Limit agents\nnpx claude-flow automation auto-agent --task \"Fix bugs\" --max-agents 3\n\n# Use specific strategy\nnpx claude-flow automation auto-agent --strategy specialized\n\\`\\`\\`\n`,\n      'smart-spawn': `# smart-spawn\n\nIntelligently spawn agents based on workload analysis.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow automation smart-spawn [options]\n\\`\\`\\`\n\n## Options\n- \\`--analyze\\` - Analyze before spawning\n- \\`--threshold <n>\\` - Spawn threshold\n- \\`--topology <type>\\` - Preferred topology\n\n## Examples\n\\`\\`\\`bash\n# Smart spawn with analysis\nnpx claude-flow automation smart-spawn --analyze\n\n# Set spawn threshold\nnpx claude-flow automation smart-spawn --threshold 5\n\n# Force topology\nnpx claude-flow automation smart-spawn --topology hierarchical\n\\`\\`\\`\n`,\n      'workflow-select': `# workflow-select\n\nAutomatically select optimal workflow based on task type.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow automation workflow-select [options]\n\\`\\`\\`\n\n## Options\n- \\`--task <description>\\` - Task description\n- \\`--constraints <list>\\` - Workflow constraints\n- \\`--preview\\` - Preview without executing\n\n## Examples\n\\`\\`\\`bash\n# Select workflow for task\nnpx claude-flow automation workflow-select --task \"Deploy to production\"\n\n# With constraints\nnpx claude-flow automation workflow-select --constraints \"no-downtime,rollback\"\n\n# Preview mode\nnpx claude-flow automation workflow-select --task \"Database migration\" --preview\n\\`\\`\\`\n`\n    },\n    coordination: {\n      'swarm-init': `# swarm-init\n\nInitialize a new agent swarm with specified topology.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow swarm init [options]\n\\`\\`\\`\n\n## Options\n- \\`--topology <type>\\` - Swarm topology (mesh, hierarchical, ring, star)\n- \\`--max-agents <n>\\` - Maximum number of agents\n- \\`--strategy <type>\\` - Execution strategy (parallel, sequential, adaptive)\n\n## Examples\n\\`\\`\\`bash\n# Initialize hierarchical swarm\nnpx claude-flow swarm init --topology hierarchical\n\n# With agent limit\nnpx claude-flow swarm init --topology mesh --max-agents 8\n\n# Parallel execution\nnpx claude-flow swarm init --strategy parallel\n\\`\\`\\`\n`,\n      'agent-spawn': `# agent-spawn\n\nSpawn a new agent in the current swarm.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow agent spawn [options]\n\\`\\`\\`\n\n## Options\n- \\`--type <type>\\` - Agent type (coder, researcher, analyst, tester, coordinator)\n- \\`--name <name>\\` - Custom agent name\n- \\`--skills <list>\\` - Specific skills (comma-separated)\n\n## Examples\n\\`\\`\\`bash\n# Spawn coder agent\nnpx claude-flow agent spawn --type coder\n\n# With custom name\nnpx claude-flow agent spawn --type researcher --name \"API Expert\"\n\n# With specific skills\nnpx claude-flow agent spawn --type coder --skills \"python,fastapi,testing\"\n\\`\\`\\`\n`,\n      'task-orchestrate': `# task-orchestrate\n\nOrchestrate complex tasks across the swarm.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow task orchestrate [options]\n\\`\\`\\`\n\n## Options\n- \\`--task <description>\\` - Task description\n- \\`--strategy <type>\\` - Orchestration strategy\n- \\`--priority <level>\\` - Task priority (low, medium, high, critical)\n\n## Examples\n\\`\\`\\`bash\n# Orchestrate development task\nnpx claude-flow task orchestrate --task \"Implement user authentication\"\n\n# High priority task\nnpx claude-flow task orchestrate --task \"Fix production bug\" --priority critical\n\n# With specific strategy\nnpx claude-flow task orchestrate --task \"Refactor codebase\" --strategy parallel\n\\`\\`\\`\n`\n    },\n    github: {\n      'github-swarm': `# github-swarm\n\nCreate a specialized swarm for GitHub repository management.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow github swarm [options]\n\\`\\`\\`\n\n## Options\n- \\`--repository <owner/repo>\\` - Target repository\n- \\`--agents <n>\\` - Number of specialized agents\n- \\`--focus <area>\\` - Focus area (maintenance, features, security)\n\n## Examples\n\\`\\`\\`bash\n# Create GitHub swarm\nnpx claude-flow github swarm --repository myorg/myrepo\n\n# With specific focus\nnpx claude-flow github swarm --repository myorg/myrepo --focus security\n\n# Custom agent count\nnpx claude-flow github swarm --repository myorg/myrepo --agents 6\n\\`\\`\\`\n`,\n      'repo-analyze': `# repo-analyze\n\nDeep analysis of GitHub repository with AI insights.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow github repo-analyze [options]\n\\`\\`\\`\n\n## Options\n- \\`--repository <owner/repo>\\` - Repository to analyze\n- \\`--deep\\` - Enable deep analysis\n- \\`--include <areas>\\` - Include specific areas (issues, prs, code, commits)\n\n## Examples\n\\`\\`\\`bash\n# Basic analysis\nnpx claude-flow github repo-analyze --repository myorg/myrepo\n\n# Deep analysis\nnpx claude-flow github repo-analyze --repository myorg/myrepo --deep\n\n# Specific areas\nnpx claude-flow github repo-analyze --repository myorg/myrepo --include issues,prs\n\\`\\`\\`\n`,\n      'pr-enhance': `# pr-enhance\n\nAI-powered pull request enhancements.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow github pr-enhance [options]\n\\`\\`\\`\n\n## Options\n- \\`--pr-number <n>\\` - Pull request number\n- \\`--add-tests\\` - Add missing tests\n- \\`--improve-docs\\` - Improve documentation\n- \\`--check-security\\` - Security review\n\n## Examples\n\\`\\`\\`bash\n# Enhance PR\nnpx claude-flow github pr-enhance --pr-number 123\n\n# Add tests\nnpx claude-flow github pr-enhance --pr-number 123 --add-tests\n\n# Full enhancement\nnpx claude-flow github pr-enhance --pr-number 123 --add-tests --improve-docs\n\\`\\`\\`\n`,\n      'issue-triage': `# issue-triage\n\nIntelligent issue classification and triage.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow github issue-triage [options]\n\\`\\`\\`\n\n## Options\n- \\`--repository <owner/repo>\\` - Target repository\n- \\`--auto-label\\` - Automatically apply labels\n- \\`--assign\\` - Auto-assign to team members\n\n## Examples\n\\`\\`\\`bash\n# Triage issues\nnpx claude-flow github issue-triage --repository myorg/myrepo\n\n# With auto-labeling\nnpx claude-flow github issue-triage --repository myorg/myrepo --auto-label\n\n# Full automation\nnpx claude-flow github issue-triage --repository myorg/myrepo --auto-label --assign\n\\`\\`\\`\n`,\n      'code-review': `# code-review\n\nAutomated code review with swarm intelligence.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow github code-review [options]\n\\`\\`\\`\n\n## Options\n- \\`--pr-number <n>\\` - Pull request to review\n- \\`--focus <areas>\\` - Review focus (security, performance, style)\n- \\`--suggest-fixes\\` - Suggest code fixes\n\n## Examples\n\\`\\`\\`bash\n# Review PR\nnpx claude-flow github code-review --pr-number 456\n\n# Security focus\nnpx claude-flow github code-review --pr-number 456 --focus security\n\n# With fix suggestions\nnpx claude-flow github code-review --pr-number 456 --suggest-fixes\n\\`\\`\\`\n`\n    },\n    hooks: {\n      'pre-task': `# pre-task\n\nHook executed before task execution.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow hook pre-task [options]\n\\`\\`\\`\n\n## Options\n- \\`--description <text>\\` - Task description\n- \\`--auto-spawn-agents\\` - Automatically spawn required agents\n- \\`--load-context\\` - Load previous context\n\n## Examples\n\\`\\`\\`bash\n# Basic pre-task hook\nnpx claude-flow hook pre-task --description \"Building API endpoints\"\n\n# With auto-spawn\nnpx claude-flow hook pre-task --description \"Complex refactoring\" --auto-spawn-agents\n\n# Load context\nnpx claude-flow hook pre-task --description \"Continue feature\" --load-context\n\\`\\`\\`\n`,\n      'post-task': `# post-task\n\nHook executed after task completion.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow hook post-task [options]\n\\`\\`\\`\n\n## Options\n- \\`--task-id <id>\\` - Task identifier\n- \\`--analyze-performance\\` - Analyze task performance\n- \\`--update-memory\\` - Update swarm memory\n\n## Examples\n\\`\\`\\`bash\n# Basic post-task\nnpx claude-flow hook post-task --task-id task-123\n\n# With performance analysis\nnpx claude-flow hook post-task --task-id task-123 --analyze-performance\n\n# Update memory\nnpx claude-flow hook post-task --task-id task-123 --update-memory\n\\`\\`\\`\n`,\n      'pre-edit': `# pre-edit\n\nHook executed before file edits.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow hook pre-edit [options]\n\\`\\`\\`\n\n## Options\n- \\`--file <path>\\` - File to be edited\n- \\`--validate-syntax\\` - Validate syntax before edit\n- \\`--backup\\` - Create backup\n\n## Examples\n\\`\\`\\`bash\n# Pre-edit hook\nnpx claude-flow hook pre-edit --file src/api.js\n\n# With validation\nnpx claude-flow hook pre-edit --file src/api.js --validate-syntax\n\n# Create backup\nnpx claude-flow hook pre-edit --file src/api.js --backup\n\\`\\`\\`\n`,\n      'post-edit': `# post-edit\n\nHook executed after file edits.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow hook post-edit [options]\n\\`\\`\\`\n\n## Options\n- \\`--file <path>\\` - Edited file\n- \\`--memory-key <key>\\` - Memory storage key\n- \\`--format\\` - Auto-format code\n\n## Examples\n\\`\\`\\`bash\n# Post-edit hook\nnpx claude-flow hook post-edit --file src/api.js\n\n# Store in memory\nnpx claude-flow hook post-edit --file src/api.js --memory-key \"api-changes\"\n\n# With formatting\nnpx claude-flow hook post-edit --file src/api.js --format\n\\`\\`\\`\n`,\n      'session-end': `# session-end\n\nHook executed at session end.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow hook session-end [options]\n\\`\\`\\`\n\n## Options\n- \\`--export-metrics\\` - Export session metrics\n- \\`--generate-summary\\` - Generate session summary\n- \\`--persist-state\\` - Save session state\n\n## Examples\n\\`\\`\\`bash\n# End session\nnpx claude-flow hook session-end\n\n# Export metrics\nnpx claude-flow hook session-end --export-metrics\n\n# Full closure\nnpx claude-flow hook session-end --export-metrics --generate-summary --persist-state\n\\`\\`\\`\n`\n    },\n    memory: {\n      'memory-usage': `# memory-usage\n\nManage persistent memory storage.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow memory usage [options]\n\\`\\`\\`\n\n## Options\n- \\`--action <type>\\` - Action (store, retrieve, list, clear)\n- \\`--key <key>\\` - Memory key\n- \\`--value <data>\\` - Data to store (JSON)\n\n## Examples\n\\`\\`\\`bash\n# Store memory\nnpx claude-flow memory usage --action store --key \"project-config\" --value '{\"api\": \"v2\"}'\n\n# Retrieve memory\nnpx claude-flow memory usage --action retrieve --key \"project-config\"\n\n# List all keys\nnpx claude-flow memory usage --action list\n\\`\\`\\`\n`,\n      'memory-persist': `# memory-persist\n\nPersist memory across sessions.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow memory persist [options]\n\\`\\`\\`\n\n## Options\n- \\`--export <file>\\` - Export to file\n- \\`--import <file>\\` - Import from file\n- \\`--compress\\` - Compress memory data\n\n## Examples\n\\`\\`\\`bash\n# Export memory\nnpx claude-flow memory persist --export memory-backup.json\n\n# Import memory\nnpx claude-flow memory persist --import memory-backup.json\n\n# Compressed export\nnpx claude-flow memory persist --export memory.gz --compress\n\\`\\`\\`\n`,\n      'memory-search': `# memory-search\n\nSearch through stored memory.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow memory search [options]\n\\`\\`\\`\n\n## Options\n- \\`--query <text>\\` - Search query\n- \\`--pattern <regex>\\` - Pattern matching\n- \\`--limit <n>\\` - Result limit\n\n## Examples\n\\`\\`\\`bash\n# Search memory\nnpx claude-flow memory search --query \"authentication\"\n\n# Pattern search\nnpx claude-flow memory search --pattern \"api-.*\"\n\n# Limited results\nnpx claude-flow memory search --query \"config\" --limit 10\n\\`\\`\\`\n`\n    },\n    monitoring: {\n      'swarm-monitor': `# swarm-monitor\n\nReal-time swarm monitoring.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow swarm monitor [options]\n\\`\\`\\`\n\n## Options\n- \\`--interval <ms>\\` - Update interval\n- \\`--metrics\\` - Show detailed metrics\n- \\`--export\\` - Export monitoring data\n\n## Examples\n\\`\\`\\`bash\n# Start monitoring\nnpx claude-flow swarm monitor\n\n# Custom interval\nnpx claude-flow swarm monitor --interval 5000\n\n# With metrics\nnpx claude-flow swarm monitor --metrics\n\\`\\`\\`\n`,\n      'agent-metrics': `# agent-metrics\n\nView agent performance metrics.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow agent metrics [options]\n\\`\\`\\`\n\n## Options\n- \\`--agent-id <id>\\` - Specific agent\n- \\`--period <time>\\` - Time period\n- \\`--format <type>\\` - Output format\n\n## Examples\n\\`\\`\\`bash\n# All agents metrics\nnpx claude-flow agent metrics\n\n# Specific agent\nnpx claude-flow agent metrics --agent-id agent-001\n\n# Last hour\nnpx claude-flow agent metrics --period 1h\n\\`\\`\\`\n`,\n      'real-time-view': `# real-time-view\n\nReal-time view of swarm activity.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow monitoring real-time-view [options]\n\\`\\`\\`\n\n## Options\n- \\`--filter <type>\\` - Filter view\n- \\`--highlight <pattern>\\` - Highlight pattern\n- \\`--tail <n>\\` - Show last N events\n\n## Examples\n\\`\\`\\`bash\n# Start real-time view\nnpx claude-flow monitoring real-time-view\n\n# Filter errors\nnpx claude-flow monitoring real-time-view --filter errors\n\n# Highlight pattern\nnpx claude-flow monitoring real-time-view --highlight \"API\"\n\\`\\`\\`\n`\n    },\n    optimization: {\n      'topology-optimize': `# topology-optimize\n\nOptimize swarm topology for current workload.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow optimization topology-optimize [options]\n\\`\\`\\`\n\n## Options\n- \\`--analyze-first\\` - Analyze before optimizing\n- \\`--target <metric>\\` - Optimization target\n- \\`--apply\\` - Apply optimizations\n\n## Examples\n\\`\\`\\`bash\n# Analyze and suggest\nnpx claude-flow optimization topology-optimize --analyze-first\n\n# Optimize for speed\nnpx claude-flow optimization topology-optimize --target speed\n\n# Apply changes\nnpx claude-flow optimization topology-optimize --target efficiency --apply\n\\`\\`\\`\n`,\n      'parallel-execute': `# parallel-execute\n\nExecute tasks in parallel for maximum efficiency.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow optimization parallel-execute [options]\n\\`\\`\\`\n\n## Options\n- \\`--tasks <file>\\` - Task list file\n- \\`--max-parallel <n>\\` - Maximum parallel tasks\n- \\`--strategy <type>\\` - Execution strategy\n\n## Examples\n\\`\\`\\`bash\n# Execute task list\nnpx claude-flow optimization parallel-execute --tasks tasks.json\n\n# Limit parallelism\nnpx claude-flow optimization parallel-execute --tasks tasks.json --max-parallel 5\n\n# Custom strategy\nnpx claude-flow optimization parallel-execute --strategy adaptive\n\\`\\`\\`\n`,\n      'cache-manage': `# cache-manage\n\nManage operation cache for performance.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow optimization cache-manage [options]\n\\`\\`\\`\n\n## Options\n- \\`--action <type>\\` - Action (view, clear, optimize)\n- \\`--max-size <mb>\\` - Maximum cache size\n- \\`--ttl <seconds>\\` - Time to live\n\n## Examples\n\\`\\`\\`bash\n# View cache stats\nnpx claude-flow optimization cache-manage --action view\n\n# Clear cache\nnpx claude-flow optimization cache-manage --action clear\n\n# Set limits\nnpx claude-flow optimization cache-manage --max-size 100 --ttl 3600\n\\`\\`\\`\n`\n    },\n    training: {\n      'neural-train': `# neural-train\n\nTrain neural patterns from operations.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow training neural-train [options]\n\\`\\`\\`\n\n## Options\n- \\`--data <source>\\` - Training data source\n- \\`--model <name>\\` - Target model\n- \\`--epochs <n>\\` - Training epochs\n\n## Examples\n\\`\\`\\`bash\n# Train from recent ops\nnpx claude-flow training neural-train --data recent\n\n# Specific model\nnpx claude-flow training neural-train --model task-predictor\n\n# Custom epochs\nnpx claude-flow training neural-train --epochs 100\n\\`\\`\\`\n`,\n      'pattern-learn': `# pattern-learn\n\nLearn patterns from successful operations.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow training pattern-learn [options]\n\\`\\`\\`\n\n## Options\n- \\`--source <type>\\` - Pattern source\n- \\`--threshold <score>\\` - Success threshold\n- \\`--save <name>\\` - Save pattern set\n\n## Examples\n\\`\\`\\`bash\n# Learn from all ops\nnpx claude-flow training pattern-learn\n\n# High success only\nnpx claude-flow training pattern-learn --threshold 0.9\n\n# Save patterns\nnpx claude-flow training pattern-learn --save optimal-patterns\n\\`\\`\\`\n`,\n      'model-update': `# model-update\n\nUpdate neural models with new data.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow training model-update [options]\n\\`\\`\\`\n\n## Options\n- \\`--model <name>\\` - Model to update\n- \\`--incremental\\` - Incremental update\n- \\`--validate\\` - Validate after update\n\n## Examples\n\\`\\`\\`bash\n# Update all models\nnpx claude-flow training model-update\n\n# Specific model\nnpx claude-flow training model-update --model agent-selector\n\n# Incremental with validation\nnpx claude-flow training model-update --incremental --validate\n\\`\\`\\`\n`\n    },\n    workflows: {\n      'workflow-create': `# workflow-create\n\nCreate reusable workflow templates.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow workflow create [options]\n\\`\\`\\`\n\n## Options\n- \\`--name <name>\\` - Workflow name\n- \\`--from-history\\` - Create from history\n- \\`--interactive\\` - Interactive creation\n\n## Examples\n\\`\\`\\`bash\n# Create workflow\nnpx claude-flow workflow create --name \"deploy-api\"\n\n# From history\nnpx claude-flow workflow create --name \"test-suite\" --from-history\n\n# Interactive mode\nnpx claude-flow workflow create --interactive\n\\`\\`\\`\n`,\n      'workflow-execute': `# workflow-execute\n\nExecute saved workflows.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow workflow execute [options]\n\\`\\`\\`\n\n## Options\n- \\`--name <name>\\` - Workflow name\n- \\`--params <json>\\` - Workflow parameters\n- \\`--dry-run\\` - Preview execution\n\n## Examples\n\\`\\`\\`bash\n# Execute workflow\nnpx claude-flow workflow execute --name \"deploy-api\"\n\n# With parameters\nnpx claude-flow workflow execute --name \"test-suite\" --params '{\"env\": \"staging\"}'\n\n# Dry run\nnpx claude-flow workflow execute --name \"deploy-api\" --dry-run\n\\`\\`\\`\n`,\n      'workflow-export': `# workflow-export\n\nExport workflows for sharing.\n\n## Usage\n\\`\\`\\`bash\nnpx claude-flow workflow export [options]\n\\`\\`\\`\n\n## Options\n- \\`--name <name>\\` - Workflow to export\n- \\`--format <type>\\` - Export format\n- \\`--include-history\\` - Include execution history\n\n## Examples\n\\`\\`\\`bash\n# Export workflow\nnpx claude-flow workflow export --name \"deploy-api\"\n\n# As YAML\nnpx claude-flow workflow export --name \"test-suite\" --format yaml\n\n# With history\nnpx claude-flow workflow export --name \"deploy-api\" --include-history\n\\`\\`\\`\n`\n    }\n  };\n\n  return docs[category]?.[command] || `# ${command}\\n\\nCommand documentation for ${command} in category ${category}.\\n\\nUsage:\\n\\`\\`\\`bash\\nnpx claude-flow ${category} ${command} [options]\\n\\`\\`\\`\\n`;\n}\n\n// Command categories and their commands\nexport const COMMAND_STRUCTURE = {\n  analysis: ['bottleneck-detect', 'token-usage', 'performance-report'],\n  automation: ['auto-agent', 'smart-spawn', 'workflow-select'],\n  coordination: ['swarm-init', 'agent-spawn', 'task-orchestrate'],\n  github: ['github-swarm', 'repo-analyze', 'pr-enhance', 'issue-triage', 'code-review'],\n  hooks: ['pre-task', 'post-task', 'pre-edit', 'post-edit', 'session-end'],\n  memory: ['memory-usage', 'memory-persist', 'memory-search'],\n  monitoring: ['swarm-monitor', 'agent-metrics', 'real-time-view'],\n  optimization: ['topology-optimize', 'parallel-execute', 'cache-manage'],\n  training: ['neural-train', 'pattern-learn', 'model-update'],\n  workflows: ['workflow-create', 'workflow-execute', 'workflow-export']\n};\n\n// Helper script content\nexport function createHelperScript(name) {\n  const scripts = {\n    'setup-mcp.sh': `#!/bin/bash\n# Setup MCP server for Claude Flow\n\necho \"🚀 Setting up Claude Flow MCP server...\"\n\n# Check if claude command exists\nif ! command -v claude &> /dev/null; then\n    echo \"❌ Error: Claude Code CLI not found\"\n    echo \"Please install Claude Code first\"\n    exit 1\nfi\n\n# Add MCP server\necho \"📦 Adding Claude Flow MCP server...\"\nclaude mcp add claude-flow npx claude-flow mcp start\n\necho \"✅ MCP server setup complete!\"\necho \"🎯 You can now use mcp__claude-flow__ tools in Claude Code\"\n`,\n    'quick-start.sh': `#!/bin/bash\n# Quick start guide for Claude Flow\n\necho \"🚀 Claude Flow Quick Start\"\necho \"==========================\"\necho \"\"\necho \"1. Initialize a swarm:\"\necho \"   npx claude-flow swarm init --topology hierarchical\"\necho \"\"\necho \"2. Spawn agents:\"\necho \"   npx claude-flow agent spawn --type coder --name \\\"API Developer\\\"\"\necho \"\"\necho \"3. Orchestrate tasks:\"\necho \"   npx claude-flow task orchestrate --task \\\"Build REST API\\\"\"\necho \"\"\necho \"4. Monitor progress:\"\necho \"   npx claude-flow swarm monitor\"\necho \"\"\necho \"📚 For more examples, see .claude/commands/\"\n`,\n    'github-setup.sh': `#!/bin/bash\n# Setup GitHub integration for Claude Flow\n\necho \"🔗 Setting up GitHub integration...\"\n\n# Check for gh CLI\nif ! command -v gh &> /dev/null; then\n    echo \"⚠️  GitHub CLI (gh) not found\"\n    echo \"Install from: https://cli.github.com/\"\n    echo \"Continuing without GitHub features...\"\nelse\n    echo \"✅ GitHub CLI found\"\n    \n    # Check auth status\n    if gh auth status &> /dev/null; then\n        echo \"✅ GitHub authentication active\"\n    else\n        echo \"⚠️  Not authenticated with GitHub\"\n        echo \"Run: gh auth login\"\n    fi\nfi\n\necho \"\"\necho \"📦 GitHub swarm commands available:\"\necho \"  - npx claude-flow github swarm\"\necho \"  - npx claude-flow repo analyze\"\necho \"  - npx claude-flow pr enhance\"\necho \"  - npx claude-flow issue triage\"\n`\n  };\n  \n  return scripts[name] || '';\n}\n\n// Wrapper script fallbacks\nfunction createWrapperScriptFallback(type) {\n  if (type === 'unix') {\n    // Return the universal ES module compatible wrapper\n    return `#!/usr/bin/env node\n\n/**\n * Claude Flow CLI - Universal Wrapper\n * Works in both CommonJS and ES Module projects\n */\n\n// Use dynamic import to work in both CommonJS and ES modules\n(async () => {\n  const { spawn } = await import('child_process');\n  const { resolve } = await import('path');\n  const { fileURLToPath } = await import('url');\n  \n  try {\n    // Try to use import.meta.url (ES modules)\n    const __filename = fileURLToPath(import.meta.url);\n    const __dirname = resolve(__filename, '..');\n  } catch {\n    // Fallback for CommonJS\n  }\n\n  // Try multiple strategies to find claude-flow\n  const strategies = [\n    // 1. Local node_modules\n    async () => {\n      try {\n        const localPath = resolve(process.cwd(), 'node_modules/.bin/claude-flow');\n        const { existsSync } = await import('fs');\n        if (existsSync(localPath)) {\n          return spawn(localPath, process.argv.slice(2), { stdio: 'inherit' });\n        }\n      } catch {}\n    },\n    \n    // 2. Parent node_modules (monorepo)\n    async () => {\n      try {\n        const parentPath = resolve(process.cwd(), '../node_modules/.bin/claude-flow');\n        const { existsSync } = await import('fs');\n        if (existsSync(parentPath)) {\n          return spawn(parentPath, process.argv.slice(2), { stdio: 'inherit' });\n        }\n      } catch {}\n    },\n    \n    // 3. NPX with latest alpha version (prioritized over global)\n    async () => {\n      return spawn('npx', ['claude-flow@2.0.0-alpha.25', ...process.argv.slice(2)], { stdio: 'inherit' });\n    }\n  ];\n\n  // Try each strategy\n  for (const strategy of strategies) {\n    try {\n      const child = await strategy();\n      if (child) {\n        child.on('exit', (code) => process.exit(code || 0));\n        child.on('error', (err) => {\n          if (err.code !== 'ENOENT') {\n            console.error('Error:', err);\n            process.exit(1);\n          }\n        });\n        return;\n      }\n    } catch {}\n  }\n  \n  console.error('Could not find claude-flow. Please install it with: npm install claude-flow');\n  process.exit(1);\n})();`;\n  } else if (type === 'windows') {\n    return `@echo off\nrem Claude Flow wrapper script for Windows\n\nrem Check if package.json exists in current directory\nif exist \"%~dp0package.json\" (\n    rem Local development mode\n    if exist \"%~dp0src\\\\cli\\\\simple-cli.js\" (\n        node \"%~dp0src\\\\cli\\\\simple-cli.js\" %*\n    ) else if exist \"%~dp0dist\\\\cli.js\" (\n        node \"%~dp0dist\\\\cli.js\" %*\n    ) else (\n        echo Error: Could not find Claude Flow CLI files\n        exit /b 1\n    )\n) else (\n    rem Production mode - use npx alpha\n    npx claude-flow@alpha %*\n)`;\n  } else if (type === 'powershell') {\n    return `# Claude Flow wrapper script for PowerShell\n\n$scriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path\n\nif (Test-Path \"$scriptPath\\\\package.json\") {\n    # Local development mode\n    if (Test-Path \"$scriptPath\\\\src\\\\cli\\\\simple-cli.js\") {\n        & node \"$scriptPath\\\\src\\\\cli\\\\simple-cli.js\" $args\n    } elseif (Test-Path \"$scriptPath\\\\dist\\\\cli.js\") {\n        & node \"$scriptPath\\\\dist\\\\cli.js\" $args\n    } else {\n        Write-Error \"Could not find Claude Flow CLI files\"\n        exit 1\n    }\n} else {\n    # Production mode - use npx alpha\n    & npx claude-flow@alpha $args\n}`;\n  }\n  return '';\n}\n\n// Fallback functions for when templates can't be loaded\nfunction createEnhancedClaudeMdFallback() {\n  // Read from the actual template file we created\n  try {\n    return readFileSync(join(__dirname, 'CLAUDE.md'), 'utf8');\n  } catch (error) {\n    // If that fails, return a minimal version\n    return `# Claude Code Configuration for Claude Flow\n\n## 🚀 IMPORTANT: Claude Flow AI-Driven Development\n\n### Claude Code Handles:\n- ✅ **ALL file operations** (Read, Write, Edit, MultiEdit)\n- ✅ **ALL code generation** and development tasks\n- ✅ **ALL bash commands** and system operations\n- ✅ **ALL actual implementation** work\n- ✅ **Project navigation** and code analysis\n\n### Claude Flow MCP Tools Handle:\n- 🧠 **Coordination only** - Orchestrating Claude Code's actions\n- 💾 **Memory management** - Persistent state across sessions\n- 🤖 **Neural features** - Cognitive patterns and learning\n- 📊 **Performance tracking** - Monitoring and metrics\n- 🐝 **Swarm orchestration** - Multi-agent coordination\n- 🔗 **GitHub integration** - Advanced repository management\n\n### ⚠️ Key Principle:\n**MCP tools DO NOT create content or write code.** They coordinate and enhance Claude Code's native capabilities.\n\n## Quick Start\n\n1. Add MCP server: \\`claude mcp add claude-flow npx claude-flow mcp start\\`\n2. Initialize swarm: \\`mcp__claude-flow__swarm_init { topology: \"hierarchical\" }\\`\n3. Spawn agents: \\`mcp__claude-flow__agent_spawn { type: \"coder\" }\\`\n4. Orchestrate: \\`mcp__claude-flow__task_orchestrate { task: \"Build feature\" }\\`\n\nSee full documentation in \\`.claude/commands/\\`\n`;\n  }\n}\n\nfunction createEnhancedSettingsJsonFallback() {\n  return JSON.stringify({\n    env: {\n      CLAUDE_FLOW_AUTO_COMMIT: \"false\",\n      CLAUDE_FLOW_AUTO_PUSH: \"false\",\n      CLAUDE_FLOW_HOOKS_ENABLED: \"true\",\n      CLAUDE_FLOW_TELEMETRY_ENABLED: \"true\",\n      CLAUDE_FLOW_REMOTE_EXECUTION: \"true\",\n      CLAUDE_FLOW_GITHUB_INTEGRATION: \"true\"\n    },\n    permissions: {\n      allow: [\n        \"Bash(npx claude-flow *)\",\n        \"Bash(npm run lint)\",\n        \"Bash(npm run test:*)\",\n        \"Bash(npm test *)\",\n        \"Bash(git status)\",\n        \"Bash(git diff *)\",\n        \"Bash(git log *)\",\n        \"Bash(git add *)\",\n        \"Bash(git commit *)\",\n        \"Bash(git push)\",\n        \"Bash(git config *)\",\n        \"Bash(gh *)\",\n        \"Bash(node *)\",\n        \"Bash(which *)\",\n        \"Bash(pwd)\",\n        \"Bash(ls *)\"\n      ],\n      deny: [\n        \"Bash(rm -rf /)\",\n        \"Bash(curl * | bash)\",\n        \"Bash(wget * | sh)\",\n        \"Bash(eval *)\"\n      ]\n    },\n    hooks: {\n      PreToolUse: [\n        {\n          matcher: \"Bash\",\n          hooks: [\n            {\n              type: \"command\",\n              command: \"npx claude-flow@alpha hooks pre-command --command \\\"${command}\\\" --validate-safety true --prepare-resources true\"\n            }\n          ]\n        },\n        {\n          matcher: \"Write|Edit|MultiEdit\",\n          hooks: [\n            {\n              type: \"command\",\n              command: \"npx claude-flow@alpha hooks pre-edit --file \\\"${file}\\\" --auto-assign-agents true --load-context true\"\n            }\n          ]\n        }\n      ],\n      PostToolUse: [\n        {\n          matcher: \"Bash\",\n          hooks: [\n            {\n              type: \"command\",\n              command: \"npx claude-flow@alpha hooks post-command --command \\\"${command}\\\" --track-metrics true --store-results true\"\n            }\n          ]\n        },\n        {\n          matcher: \"Write|Edit|MultiEdit\",\n          hooks: [\n            {\n              type: \"command\",\n              command: \"npx claude-flow@alpha hooks post-edit --file \\\"${file}\\\" --format true --update-memory true --train-neural true\"\n            }\n          ]\n        }\n      ],\n      Stop: [\n        {\n          hooks: [\n            {\n              type: \"command\",\n              command: \"npx claude-flow@alpha hooks session-end --generate-summary true --persist-state true --export-metrics true\"\n            }\n          ]\n        }\n      ]\n    },\n    mcpServers: {\n      \"claude-flow\": {\n        command: \"npx\",\n        args: [\"claude-flow\", \"mcp\", \"start\"],\n        env: {\n          CLAUDE_FLOW_HOOKS_ENABLED: \"true\",\n          CLAUDE_FLOW_TELEMETRY_ENABLED: \"true\",\n          CLAUDE_FLOW_REMOTE_READY: \"true\",\n          CLAUDE_FLOW_GITHUB_INTEGRATION: \"true\"\n        }\n      }\n    },\n    includeCoAuthoredBy: true,\n    features: {\n      autoTopologySelection: true,\n      parallelExecution: true,\n      neuralTraining: true,\n      bottleneckAnalysis: true,\n      smartAutoSpawning: true,\n      selfHealingWorkflows: true,\n      crossSessionMemory: true,\n      githubIntegration: true\n    },\n    performance: {\n      maxAgents: 10,\n      defaultTopology: \"hierarchical\",\n      executionStrategy: \"parallel\",\n      tokenOptimization: true,\n      cacheEnabled: true,\n      telemetryLevel: \"detailed\"\n    }\n  }, null, 2);\n}","structuredPatch":[{"oldStart":1266,"oldLines":7,"newStart":1266,"newLines":7,"lines":["           hooks: [","             {","               type: \"command\",","-              command: \"npx claude-flow@alpha hooks pre-command --command \\\"${command}\\\" --validate-safety true --prepare-resources true\"","+              command: \"cat | jq -r '.tool_input.command // \\\"\\\"' | xargs -I {} npx claude-flow@alpha hooks pre-command --command \\\"{}\\\" --validate-safety true --prepare-resources true\"","             }","           ]","         },"]}],"userModified":false,"replaceAll":false}}[JQ_VALIDATION] Extracted file: /workspaces/claude-code-flow/src/cli/simple-commands/init/templates/enhanced-templates.js
[JQ_VALIDATION] File via xargs: /workspaces/claude-code-flow/src/cli/simple-commands/init/templates/enhanced-templates.js
